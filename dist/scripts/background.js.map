{"version":3,"sources":["scripts/background.js"],"names":["loadSound","url","callback","request","XMLHttpRequest","open","responseType","onload","context","decodeAudioData","response","onError","send","playSound","buffer","rate","panner","source","createBufferSource","connect","playbackRate","setValueAtTime","start","err","console","log","AudioContext","pingBuffer","pongBuffer","postPingBuffer","postPongBuffer","failBuffer","threeBuffer","leftPanner","createStereoPanner","rightPanner","pan","value","destination","buf","chrome","runtime","onInstalled","addListener","details","previousVersion","tabs","onUpdated","tabId","pageAction","show","webRequest","onBeforeSendHeaders","method","urls","onHeadersReceived","statusCode","onCompleted"],"mappings":"AAAA,YAgEA,SAASA,WAAUC,EAAKC,GACtB,GAAIC,GAAU,GAAIC,eAClBD,GAAQE,KAAK,MAAOJ,GAAK,GACzBE,EAAQG,aAAe,cAGvBH,EAAQI,OAAS,WACfC,QAAQC,gBAAgBN,EAAQO,SAAUR,EAAUS,UAEtDR,EAAQS,OAGV,QAASC,WAAUC,EAAQC,EAAMC,GAC/B,GAAIC,GAAST,QAAQU,oBACrBD,GAAOH,OAASA,EAChBG,EAAOE,QAAQH,GACfC,EAAOG,aAAaC,eAAeN,EAAM,GACzCE,EAAOK,MAAM,GAGf,QAASX,SAAQY,GACfC,QAAQC,IAAI,sBAAuBF,GAnFrC,GAAIf,SAAU,GAAIkB,cAGdC,WAAa,KACbC,WAAa,KACbC,eAAiB,KACjBC,eAAiB,KACjBC,WAAa,KACbC,YAAc,KAGdC,WAAazB,QAAQ0B,qBACrBC,YAAc3B,QAAQ0B,oBAC1BD,YAAWG,IAAIC,SACfF,YAAYC,IAAIC,MAAQ,EACxBJ,WAAWd,QAAQX,QAAQ8B,aAC3BH,YAAYhB,QAAQX,QAAQ8B,aAG5BtC,UAAU,gBAAiB,SAAUuC,GACnCZ,WAAaY,IAEfvC,UAAU,iBAAkB,SAAUuC,GACpCX,WAAaW,IAEfvC,UAAU,kBAAmB,SAAUuC,GACrCV,eAAiBU,IAEnBvC,UAAU,kBAAmB,SAAUuC,GACrCT,eAAiBS,IAEnBvC,UAAU,+BAAgC,SAAUuC,GAClDR,WAAaQ,IAEfvC,UAAU,uBAAwB,SAAUuC,GAC1CR,WAAaQ,IAGfC,OAAOC,QAAQC,YAAYC,YAAY,SAAUC,GAC/CpB,QAAQC,IAAI,kBAAmBmB,EAAQC,mBAGzCL,OAAOM,KAAKC,UAAUJ,YAAY,SAAUK,GAC1CR,OAAOS,WAAWC,KAAKF,KAGzBR,OAAOW,WAAWC,oBAAoBT,YAAY,SAAUC,GACnC,SAAnBA,EAAQS,QAAqBxB,eAAgBhB,UAAUgB,eAAgB,EAAGI,YAAqBN,YAAYd,UAAUc,WAAY,EAAGM,cACrIqB,MAAO,gBAEZd,OAAOW,WAAWI,kBAAkBZ,YAAY,SAAUC,GACxDpB,QAAQC,IAAImB,EAAQY,cACjBF,MAAO,gBAEZd,OAAOW,WAAWM,YAAYd,YAAY,SAAUC,GAC9CA,EAAQY,YAAc,IACxB3C,UAAUkB,WAAY,EAAGvB,QAAQ8B,aACxBM,EAAQY,YAAc,IAC/B3C,UAAUmB,YAAa,EAAGxB,QAAQ8B,aACN,SAAnBM,EAAQS,QAAqBvB,eAAgBjB,UAAUiB,eAAgB,EAAGK,aAAsBP,YAAYf,UAAUe,WAAY,GAAKO,eAC/ImB,MAAO","file":"scripts/background.js","sourcesContent":["'use strict';\n\nvar context = new AudioContext();\n\n// create audio buffers\nvar pingBuffer = null;\nvar pongBuffer = null;\nvar postPingBuffer = null;\nvar postPongBuffer = null;\nvar failBuffer = null;\nvar threeBuffer = null;\n\n// create and chain audio nodes\nvar leftPanner = context.createStereoPanner();\nvar rightPanner = context.createStereoPanner();\nleftPanner.pan.value = -1;\nrightPanner.pan.value = 1;\nleftPanner.connect(context.destination);\nrightPanner.connect(context.destination);\n\n// load sounds\nloadSound('audio/pop.mp3', function (buf) {\n  pingBuffer = buf;\n});\nloadSound('audio/pop2.mp3', function (buf) {\n  pongBuffer = buf;\n});\nloadSound('audio/post1.mp3', function (buf) {\n  postPingBuffer = buf;\n});\nloadSound('audio/post2.mp3', function (buf) {\n  postPongBuffer = buf;\n});\nloadSound('audio/gnatattack_bombhit.mp3', function (buf) {\n  failBuffer = buf;\n});\nloadSound('audio/eraserloop.mp3', function (buf) {\n  failBuffer = buf;\n});\n\nchrome.runtime.onInstalled.addListener(function (details) {\n  console.log('previousVersion', details.previousVersion);\n});\n\nchrome.tabs.onUpdated.addListener(function (tabId) {\n  chrome.pageAction.show(tabId);\n});\n\nchrome.webRequest.onBeforeSendHeaders.addListener(function (details) {\n  if (details.method === 'POST' && postPingBuffer) playSound(postPingBuffer, 1, leftPanner);else if (pingBuffer) playSound(pingBuffer, 2, leftPanner);\n}, { urls: ['<all_urls>'] });\n\nchrome.webRequest.onHeadersReceived.addListener(function (details) {\n  console.log(details.statusCode);\n}, { urls: ['<all_urls>'] });\n\nchrome.webRequest.onCompleted.addListener(function (details) {\n  if (details.statusCode >= 400) {\n    playSound(failBuffer, 1, context.destination);\n  } else if (details.statusCode >= 300) {\n    playSound(threeBuffer, 1, context.destination);\n  } else if (details.method === 'POST' && postPongBuffer) playSound(postPongBuffer, 1, rightPanner);else if (pongBuffer) playSound(pongBuffer, 0.3, rightPanner);\n}, { urls: ['<all_urls>'] });\n\nfunction loadSound(url, callback) {\n  var request = new XMLHttpRequest();\n  request.open('GET', url, true);\n  request.responseType = 'arraybuffer';\n\n  // Decode asynchronously\n  request.onload = function () {\n    context.decodeAudioData(request.response, callback, onError);\n  };\n  request.send();\n}\n\nfunction playSound(buffer, rate, panner) {\n  var source = context.createBufferSource(); // creates a sound source\n  source.buffer = buffer; // tell the source which sound to play\n  source.connect(panner); // connect the source to the context's destination (the speakers)\n  source.playbackRate.setValueAtTime(rate, 0);\n  source.start(0); // play the source now\n}\n\nfunction onError(err) {\n  console.log('error loading sound', err);\n}"],"sourceRoot":"/source/"}